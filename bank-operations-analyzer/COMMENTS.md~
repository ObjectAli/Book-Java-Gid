# Глава 2. Анализатор банковских операций

## Входные данные
Файл значений, разделённых запятыми (CSV)

Пример:  
30-01-2017,-50,Tesco  
12-02-2017,6000,Salary  
3-03-2017,2000,Royalties  
14-05-2017,-30,Cinema

## Поставленные задачи:
* Какова общая сумма начислений и списаний по списку операций? Она отрицательная или положительная?
* Сколько транзакций было в конкретном месяце?
* 10 самых затратных операций
* На что было потрачено больше всего денег?

## Ход решения
По принципу SRP, можно выделить следующие функции программы:
* Считывание входных данных
* Синтаксический анализ данных в заданном формате
* Обработка результата
* Выдача результатов (суммирования и др.)

## Теория
### Принцип KISS
Принцип KISS - Keep It Short and Simple ("сделать его коротким и простым") - Уместить код в одном классе.

### Принцип DRY
Принцип DRY - Don't Repeat Yourself ("не повторяйся") - Необходимо избегать дублирования кода.

### Принцип единственной ответственности (SRP)
Принцип единственной ответственности - основополагающий принцип при написании кода, включающий в себя 2 правила:
* Один класс несёт ответственность за одну функцию приложения.
* Никогда не должно быть больше одной причины для внесения изменений в класс.

### Антишаблоны
Антишаблоны или антипаттерны - ошибочные шаблоны написания кода по неэффективным принципам:
* Антишаблон "Класс-Бог" - тяжёлый для понимания код, когда всё в одном сложном классе.
* Антишаблон "Дублирование кода" - хрупкий код, который разваливается от любых изменений из-за много-численного дублирования.

### Связность кода
Связность кода - это качество написанного кода, которое характеризует то, как взаимодействуют друг с другом различные детали\блоки ИЛИ насколько узлы "пересекаются друг с другом".

### Внутриклассовая связность
Связность - характеристика кода, которая показывает, насколько элементы в классе, пакете, методе связаны между собой.
Существует 6 основных типов внутриклассовой связности:
* функциональная (по функциональному назначению)
* информационная (по типу информации, с которой необходимо работать)
* служебная (при объединении несвязных методов в класс - технический\служебный класс)
* логическая (при проведении одной операции над разными источниками, например, методы парсинга JSON, XML, CSV в одном классе. Противоречит SRP)
* последовательная (объединение по принципу движения потока данных, например, чтение файла -> парсинг -> обработка -> сохранение. Противоречит SRP)
* временная (объединение операций, которые связаны между собой только во времени, например, подключение или отключения соединения с БД)

### Связанность (не путать со связностью)
Связанность - характеристика кода, которая показывает, насколько классы зависят друг от друга. Чем больше связей, тем сложнее вносить правки и поддерживать продукт.
Следует стремиться к слабой связанности кода.


